{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.project_version}}"
description = "A short description of the package."
license = "{{cookiecutter.license}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
readme = "README.md"
classifiers = [
    'Natural Language :: English',
{%- if cookiecutter.license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.license] }}',
{%- endif %}
    'Programming Language :: Python :: 3',
]

[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
blacken-docs = "^1.12.1"
ruff = "^0.0.282"
{%- if cookiecutter.create_git_repo == 'y' %}
creosote = "^2.5.0"
pre-commit = "^2.20.0"
{%- endif %}
pytest = "^7.1.3"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
{%- if cookiecutter.create_sphinx_docs == 'y' %}
sphinx = "^5.3.0"
sphinx-rtd-theme = "1.1.1"
{%- endif %}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.ruff]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    "B",
    "A",
    "C4",
    "ISC",
    "ICN",
    "G",
    "INP",
    "T20",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "ERA",
    "PD",
    "PL",
    "NPY",
]
ignore = ["D203", "D212"]
unfixable = ["F401"]
line-length = 120

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
{%- if cookiecutter.create_sphinx_docs == 'y' %}
"docs/conf.py" = ["A001"]
{%- endif %}

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "--cov={{cookiecutter.project_slug}}"
testpaths = ["tests"]
